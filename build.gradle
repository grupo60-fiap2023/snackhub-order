plugins {
    id 'org.sonarqube' version '4.4.1.3373'
}

allprojects {
    apply plugin: 'org.sonarqube'

    sonarqube {
        properties {
            property 'sonar.projectKey', 'grupo60-fiap2023_snackhub-order'
            property 'sonar.organization', 'grupo60-fiap2023'
            property 'sonar.host.url', 'https://sonarcloud.io'
        }
    }
}

subprojects {
    apply plugin: 'java'

    tasks.create(name: "testCoverage", type: JacocoReport, dependsOn: "test") {
        group = "Reporting"
        description = "Generate Jacoco coverage reports for the test build."

        reports {
            html.required.set(true)
            xml.required.set(true)
        }

        def excludes = [
                '**/*Test*.*',
                '**/actions/*.*',
                '**/core/*.*',
                '**/markers/*.*',
                '**/services/**/*.*',
                '**/toolwindow/*.*',
                '**/utils/*.*'
        ]

        def javaDomainClasses = fileTree(dir: "${buildDir}/domain/classes/java/main", excludes: excludes)
        def javaAppClasses = fileTree(dir: "${buildDir}/application/classes/java/main", excludes: excludes)
        def javaInfraClasses = fileTree(dir: "${buildDir}/infrastructure/classes/java/main", excludes: excludes)
        classDirectories.from = files([javaDomainClasses, javaAppClasses, javaInfraClasses])

        sourceDirectories.from = files([
                "$project.projectDir/domain/src/main/java",
                "$project.projectDir/application/src/main/java",
                "$project.projectDir/infrastructure/src/main/java",
                "$buildDir/generated/source/kapt/test"
        ])

        executionData.from = files([
                "${project.buildDir}/domain/test.exec",
                "${project.buildDir}/application/test.exec",
                "${project.buildDir}/infrastructure/test.exec"
        ])
    }
}